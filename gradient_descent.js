function gd_Test()
{
    var m, n;
    var data = [
        [6.110100, 17.592000],[5.527700, 9.130200],[8.518600, 13.662000],[7.003200, 11.854000],[5.859800, 6.823300],[8.382900, 11.886000],[7.476400, 4.348300],[8.578100, 12.000000],[6.486200, 6.598700],[5.054600, 3.816600],[5.710700, 3.252200],[14.164000, 15.505000],[5.734000, 3.155100],[8.408400, 7.225800],[5.640700, 0.716180],[5.379400, 3.512900],[6.365400, 5.304800],[5.130100, 0.560770],[6.429600, 3.651800],[7.070800, 5.389300],[6.189100, 3.138600],[20.270000, 21.767000],[5.490100, 4.263000],[6.326100, 5.187500],[5.564900, 3.082500],[18.945000, 22.638000],[12.828000, 13.501000],[10.957000, 7.046700],[13.176000, 14.692000],[22.203000, 24.147000],[5.252400, -1.220000],[6.589400, 5.996600],[9.248200, 12.134000],[5.891800, 1.849500],[8.211100, 6.542600],[7.933400, 4.562300],[8.095900, 4.116400],[5.606300, 3.392800],[12.836000, 10.117000],[6.353400, 5.497400],[5.406900, 0.556570],[6.882500, 3.911500],[11.708000, 5.385400],[5.773700, 2.440600],[7.824700, 6.731800],[7.093100, 1.046300],[5.070200, 5.133700],[5.801400, 1.844000],[11.700000, 8.004300],[5.541600, 1.017900],[7.540200, 6.750400],[5.307700, 1.839600],[7.423900, 4.288500],[7.603100, 4.998100],[6.332800, 1.423300],[6.358900, -1.421100],[6.274200, 2.475600],[5.639700, 4.604200],[9.310200, 3.962400],[9.453600, 5.414100],[8.825400, 5.169400],[5.179300, -0.742790],[21.279000, 17.929000],[14.908000, 12.054000],[18.959000, 17.054000],[7.218200, 4.885200],[8.295100, 5.744200],[10.236000, 7.775400],[5.499400, 1.017300],[20.341000, 20.992000],[10.136000, 6.679900],[7.334500, 4.025900],[6.006200, 1.278400],[7.225900, 3.341100],[5.026900, -2.680700],[6.547900, 0.296780],[7.538600, 3.884500],[5.036500, 5.701400],[10.274000, 6.752600],[5.107700, 2.057600],[5.729200, 0.479530],[5.188400, 0.204210],[6.355700, 0.678610],[9.768700, 7.543500],[6.515900, 5.343600],[8.517200, 4.241500],[9.180200, 6.798100],[6.002000, 0.926950],[5.520400, 0.152000],[5.059400, 2.821400],[5.707700, 1.845100],[7.636600, 4.295900],[5.870700, 7.202900],[5.305400, 1.986900],[8.293400, 0.144540],[13.394000, 9.055100],[5.436900, 0.617050]
    ];
    var y, x;
    x = new Array( data.length );
    y = new Array( data.length );
    for ( m = 0; m < data.length; m++ )
    {
        x[m] = data[m][0];
        y[m] = data[m][1];
    }

    gd_MultiLinear( x, y, 15, 0.01 );

}

function gd_AddColumnWith1( arr )
{
    var y, x;
    var newArr = new Array(arr.length);
    for ( y = 0; y < arr.length; y++ )
    {
        var columns = arr[0].length;
        if ( columns == undefined )
            columns = 1;
        newArr[y] = new Array( columns+1 );
        newArr[y][0] = 1.0;
        for ( x = 0; x < columns; x++ )
        {
            if ( columns > 1 )
                newArr[y][x+1] = arr[y][x];
            else
                newArr[y][x+1] = arr[y];
        } // end for x
    } // end for y
    return newArr;
}

function gd_Mul( arr, theta )
{
    var r, c;
    var rows = arr.length;
    var cols = theta.length;
    var arrNew = new Array( rows );
    for ( r = 0; r < rows; r++ )
    {
        arrNew[r] = new Array( cols );
        for ( c = 0; c < cols; c++ )
        {
            arrNew[r][c] = arr[r][c] * theta[c];
        } // end for c
    } // end for r
    return arrNew;
}

function gd_MultiLinear( independentX, dependentY, epochs, alpha )
{
    var r, c;
    var y, x;
    var e;
    var X = gd_AddColumnWith1( independentX );
    var m = X.length;
    var n = X[0].length;
    var theta = new Array( n );
    var alpha_DIV_m = alpha/m;

    for ( r = 0; r < n; r++ )
        theta[r] = 0.0;


    for ( e = 0; e < epochs; e++ )
    {
        var hyphothesis = gd_Mul( X, theta );
        for ( y = 0; y < m; y++ )
        {
            console.log(hyphothesis[y]);
            hyphothesis[y] = hyphothesis[y] - dependentY[y];

        } // end for y

        for ( x = 0; x < n; x++ )
        {
            var sum = 0.0;
            for ( y = 0; y < m; y++ )
            {
                sum += hyphothesis[y] * X[y][x];

//                console.log(sum);
            }

            theta[x] -= alpha_DIV_m * sum;
        } // end for x
//        console.log( theta[0] + ' ' + theta[1] );
    } // end for e
//    console.log( theta[0] + ' ' + theta[1] );
}